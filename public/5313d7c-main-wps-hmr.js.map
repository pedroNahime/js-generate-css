{"version":3,"sources":["webpack:///./src/components/List/index.js"],"names":["List","props","dispatch","useDispatch","initFetchMethod","useCallback","console","log","getMovie","useEffect","movies","data","results","map","movie","id","mapStateToProps","state","mapDispatchToProps","bindActionCreators","MoviesAction","connect","propTypes","PropTypes","func","isRequired","object"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMA,IAAI,GAAG,SAAPA,IAAO,CAAAC,KAAK,EAAI;AACpB,MAAMC,QAAQ,GAAGC,+DAAW,EAA5B;AACA,MAAMC,eAAe,GAAGC,yDAAW,CAAC,YAAM;AACxCC,WAAO,CAACC,GAAR,CAAYN,KAAZ;AACA,WAAOC,QAAQ,CAACD,KAAK,CAACO,QAAN,EAAD,CAAf;AACD,GAHkC,EAGhC,CAACN,QAAD,CAHgC,CAAnC;AAIAO,yDAAS,CAAC,YAAM;AACdL,mBAAe;AAChB,GAFQ,EAEN,CAACA,eAAD,CAFM,CAAT;AAGA,SACE,2DAAC,oDAAD,QACE,2DAAC,gDAAD,iBADF,EAEE,2DAAC,kDAAD,QACGH,KAAK,CAACS,MAAN,CAAaC,IAAb,CAAkBC,OAAlB,GACGX,KAAK,CAACS,MAAN,CAAaC,IAAb,CAAkBC,OAAlB,CAA0BC,GAA1B,CAA8B,UAAAC,KAAK;AAAA,WACjC,2DAAC,8CAAD;AAAO,SAAG,EAAEA,KAAK,CAACC,EAAlB;AAAsB,WAAK,EAAED;AAA7B,MADiC;AAAA,GAAnC,CADH,GAIG,IALN,CAFF,CADF;AAYD,CArBD;;cAAMd,I;UACaG,uD;;;AAsBZ,IAAMa,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AACtCX,SAAO,CAACC,GAAR,CAAYU,KAAZ;AACD,CAFM;AAIA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAhB,QAAQ;AAAA,SACxCiB,gEAAkB,CAACC,4DAAD,EAAelB,QAAf,CADsB;AAAA,CAAnC;;eAGQmB,2DAAO,CAACL,eAAD,EAAkBE,kBAAlB,CAAP,CAA6ClB,IAA7C,C;;AAAA;AAEfA,IAAI,CAACsB,SAAL,GAAiB;AACfd,UAAQ,EAAEe,iDAAS,CAACC,IAAV,CAAeC,UADV;AAEff,QAAM,EAAEa,iDAAS,CAACG,MAAV,CAAiBD;AAFV,CAAjB;;;;;;;;;;0BAhCMzB,I;0BAuBOgB,e;0BAIAE,kB","file":"5313d7c-main-wps-hmr.js","sourcesContent":["import PropTypes from 'prop-types'\nimport React, { useEffect, useCallback } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { Creators as MoviesAction } from '../../store/ducks/movies'\nimport { connect } from 'react-redux'\nimport Movie from '../Movie'\nimport { Container, Title, Wrapper } from './styles.js'\n\nconst List = props => {\n  const dispatch = useDispatch()\n  const initFetchMethod = useCallback(() => {\n    console.log(props)\n    return dispatch(props.getMovie())\n  }, [dispatch])\n  useEffect(() => {\n    initFetchMethod()\n  }, [initFetchMethod])\n  return (\n    <Container>\n      <Title>Movies</Title>\n      <Wrapper>\n        {props.movies.data.results\n          ? props.movies.data.results.map(movie => (\n              <Movie key={movie.id} movie={movie} />\n            ))\n          : null}\n      </Wrapper>\n    </Container>\n  )\n}\n\nexport const mapStateToProps = state => {\n  console.log(state)\n}\n\nexport const mapDispatchToProps = dispatch =>\n  bindActionCreators(MoviesAction, dispatch)\n\nexport default connect(mapStateToProps, mapDispatchToProps)(List)\n\nList.propTypes = {\n  getMovie: PropTypes.func.isRequired,\n  movies: PropTypes.object.isRequired\n}\n"],"sourceRoot":""}